-- Copyright 2012 Google Inc. All Rights Reserved.
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

Eval command feeds it's arguments, as a string back into the shell

Eval of no arguments and strings of spaces
    # eval && echo ok || echo fail
    ok
    # eval '' && echo ok || echo fail
    ok
    # eval ' ' && echo ok || echo fail
    ok
    # eval '' '' && echo ok || echo fail
    ok
    # eval '    ' '' '     ' && echo ok || echo fail
    ok

Eval of simple commands
    # eval echo hi
    hi

Arguments are re-parsed
    # recho 'hi there'
    argv[1] = <hi there>
    # eval recho 'hi there'
    argv[1] = <hi>
    argv[2] = <there>

Return value is that of the command
    # eval true && echo ok || echo fail
    ok
    # eval false && echo ok || echo fail
    fail

Execution is in the context of the current shell
    # x=1
    # echo $x
    1
    # eval 'x=2'
    # echo $x
    2


. (dot) reads a script and runs it in the shell

set up
    # cd /tmp
    # rm -rf doctest
    # mkdir doctest
    # cd doctest
    # echo 'echo running dottest:' > dottest
    # echo 'recho $*' >> dottest
    # echo 'nargs=$#' >> dottest
    # echo 'shift' >> dottest
    # set a b c

running the script should affect the shel environment
    # . ./dottest
    running dottest:
    argv[1] = <a>
    argv[2] = <b>
    argv[3] = <c>
    # echo $nargs $*
    3 b c

running with args, doesn't affect the args, but all else does
    # . ./dottest w x y z           # SKIP dash
    running dottest:
    argv[1] = <w>
    argv[2] = <x>
    argv[3] = <y>
    argv[4] = <z>
    # echo $nargs $*                # SKIP dash
    4 b c

can be found via PATH
    # cd /tmp
    # PATH="/tmp/doctest:$PATH"
    # . dottest
    running dottest:
    argv[1] = <b>
    argv[2] = <c>
    # echo $nargs $*
    2 c

clean up
    # cd /tmp
    # rm -rf doctest
