-- Copyright 2013 Google Inc. All Rights Reserved.
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

Read into a var
    # read a <<\END; recho "$a"
    + word
    + END
    argv[1] = <word>

    # read a <<\END; recho "$a"
    + hello world
    + END
    argv[1] = <hello world>

Read into several vars
    # read a b c <<\END; recho "$a" "$b" "$c"
    + one two three
    + END
    argv[1] = <one>
    argv[2] = <two>
    argv[3] = <three>

    # read a b c <<\END; recho "$a" "$b" "$c"
    + each peach pear plum
    + END
    argv[1] = <each>
    argv[2] = <peach>
    argv[3] = <pear plum>

    # read a b c <<\END; recho "$a" "$b" "$c"
    + only
    + END
    argv[1] = <only>
    argv[2] = <>
    argv[3] = <>

IFS handling
    # IFS=" ,"
    # read a b c <<\END; recho "$a" "$b" "$c"
    + one,two,three
    + END
    argv[1] = <one>
    argv[2] = <two>
    argv[3] = <three>

    # read a b c <<\END; recho "$a" "$b" "$c"
    + one,  two,  three
    + END
    argv[1] = <one>
    argv[2] = <two>
    argv[3] = <three>

    # read a b c <<\END; recho "$a" "$b" "$c"
    +   one  ,  two  ,  three
    + END
    argv[1] = <one>
    argv[2] = <two>
    argv[3] = <three>

    # read a b c <<\END; recho "$a" "$b" "$c"
    + one,,three
    + END
    argv[1] = <one>
    argv[2] = <>
    argv[3] = <three>

    # read a b c <<\END; recho "$a" "$b" "$c"
    + one , , three
    + END
    argv[1] = <one>
    argv[2] = <>
    argv[3] = <three>

    # unset IFS

Trailing whitespace is removed
    N.B.: can't use a pipeline as read is then in a subshell
    # mkdir /tmp/doctest
    # cd /tmp/doctest

    # echo 'one   ' > input
    # read a b <input ; recho "$a" "$b"
    argv[1] = <one>
    argv[2] = <>

    # echo 'one   ' > input
    # read -r a b <input ; recho "$a" "$b"
    argv[1] = <one>
    argv[2] = <>

    # echo 'one two three  ' > input
    # read a b <input ; recho "$a" "$b"     # SKIP dash retains trailing here
    argv[1] = <one>
    argv[2] = <two three>

    # echo 'one two three  ' > input
    # read -r a b <input ; recho "$a" "$b"  # SKIP dash retains trailing here
    argv[1] = <one>
    argv[2] = <two three>

    only trailing trailing IFS whitespace, not trailing IFS separators
    # IFS=' ,'
    # echo 'one two three , ' > input
    # read a b <input ; recho "$a" "$b"     # SKIP dash retains trailing here
    argv[1] = <one>
    argv[2] = <two three ,>

    # echo 'one two three , ' > input
    # read -r a b <input ; recho "$a" "$b"  # SKIP dash retains trailing here
    argv[1] = <one>
    argv[2] = <two three ,>

    # unset IFS
    # cd
    # rm -rf /tmp/doctest

Reads only one line
    # read a b c <<\END; recho "$a" "$b" "$c"
    + one
    + two
    + three
    + four
    + END
    argv[1] = <one>
    argv[2] = <>
    argv[3] = <>

    Reads more if there is line continuation
    # read a b c <<\END; recho "$a" "$b" "$c"
    + one \
    + two\
    + three
    + four
    + END
    argv[1] = <one>
    argv[2] = <twothree>
    argv[3] = <>

    But not if there is -r
    # read -r a b c <<\END; recho "$a" "$b" "$c"
    + one \
    + two\
    + three
    + four
    + END
    argv[1] = <one>
    argv[2] = <\>
    argv[3] = <>

Backslashes quote anything (except new lines)
    # read a b c <<\END; recho "$a" "$b" "$c"
    + \\\hello\ world\,\ planet\\
    + END
    argv[1] = <\hello world, planet\>
    argv[2] = <>
    argv[3] = <>

The -r flag defeats this
    # read -r a b c <<\END; recho "$a" "$b" "$c"
    + \\\hello\ world\,\ planet\\
    + END
    argv[1] = <\\\hello\>
    argv[2] = <world\,\>
    argv[3] = <planet\\>

But what if backslash is in IFS?
    # IFS=" \\"
    # read a b c <<\END; recho "$a" "$b" "$c"
    + 1\2\3\4\5
    + END
    argv[1] = <12345>
    argv[2] = <>
    argv[3] = <>

    # read a b c <<\END; recho "$a" "$b" "$c"
    + 1\\2\\3\\4\\5
    + END
    argv[1] = <1\2\3\4\5>
    argv[2] = <>
    argv[3] = <>

    # read -r a b c <<\END; recho "$a" "$b" "$c"
    + 1\2\3\4\5
    + END
    argv[1] = <1>
    argv[2] = <2>
    argv[3] = <3\4\5>

    # read -r a b c <<\END; recho "$a" "$b" "$c"
    + 1\\2\\3\\4\\5
    + END
    argv[1] = <1>
    argv[2] = <>
    argv[3] = <2\\3\\4\\5>

    # unset IFS

Reading past EOF returns non-zero exit code
    # echo hello | (read a; echo $?; read b; echo $?)
    0
    1

    # echo -n hello | read a; echo $?
    1

    # echo 'hello\' | read a; echo $?
    1

bug with last test and pipes
    # true

