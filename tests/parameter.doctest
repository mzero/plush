-- Copyright 2012-2013 Google Inc. All Rights Reserved.
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

Parameter expansion tests - ยง2.6.2

Simple tests
    # a=aardvark
    # echo $a ${a} x$a x${a}x
    aardvark aardvark xaardvark xaardvarkx

Within double quotes - ยง2.2.3
    # echo "$a" "${a}" "x$a" "x${a}x"
    aardvark aardvark xaardvark xaardvarkx

Unset, set to null, and set to something
    # nothing=''
    # something='apple'
    # recho "$unknown" "$nothing" "$something"
    argv[1] = <>
    argv[2] = <>
    argv[3] = <apple>
    # recho "${unknown}" "${nothing}" "${something}"
    argv[1] = <>
    argv[2] = <>
    argv[3] = <apple>

Length operator
    # echo "${#unknown}" "${#nothing}" "${#something}"
    0 0 5

Use default operator
    # recho "${unknown-pear}" "${nothing-pear}" "${something-pear}"
    argv[1] = <pear>
    argv[2] = <>
    argv[3] = <apple>
    # recho "${unknown:-pear}" "${nothing:-pear}" "${something:-pear}"
    argv[1] = <pear>
    argv[2] = <pear>
    argv[3] = <apple>

Use alternate operator
    # recho "${unknown+pear}" "${nothing+pear}" "${something+pear}"
    argv[1] = <>
    argv[2] = <pear>
    argv[3] = <pear>
    # recho "${unknown:+pear}" "${nothing:+pear}" "${something:+pear}"
    argv[1] = <>
    argv[2] = <>
    argv[3] = <pear>

Indicate error operator
    # : "${unknown?}" "${nothing?}" "${something?}"       # ONLY plush
    unknown is unset
    # : "${unknown:?}" "${nothing:?}" "${something:?}"    # ONLY plush
    unknown is unset or null
    nothing is unset or null
    # : "${unknown?one}" "${nothing?two}" "${something?three}"      # ONLY plush
    unknown: one
    # : "${unknown:?one}" "${nothing:?two}" "${something:?three}"   # ONLY plush
    unknown: one
    nothing: two

Assign default operator
    # recho "${unknown=pear}" "${nothing=pear}" "${something=pear}"
    argv[1] = <pear>
    argv[2] = <>
    argv[3] = <apple>
    # recho "$unknown" "$nothing" "$something"
    argv[1] = <pear>
    argv[2] = <>
    argv[3] = <apple>
    # unset unknown
    # recho "${unknown:=pear}" "${nothing:=pear}" "${something:=pear}"
    argv[1] = <pear>
    argv[2] = <pear>
    argv[3] = <apple>
    # recho "$unknown" "$nothing" "$something"
    argv[1] = <pear>
    argv[2] = <pear>
    argv[3] = <apple>

Pattern matches, simple
    # str='crabapple'
    # echo ${str#crab} ${str%apple}
    apple crab
    # echo ${str#tree} ${str%tree}
    crabapple crabapple

Pattern matches, pattern features
    # str='noodle'
    # echo ${str#?}
    oodle
    # echo ${str#*d}
    le
    # echo ${str#*q}
    noodle
    # echo =${str#*}=
    =noodle=
    # echo =${str##*}=
    ==

    # echo ${str#[a-m]} ${str#[!a-m]} ${str#[n-z]} ${str#[!n-z]}
    noodle oodle oodle noodle
    # echo ${str#*[aeiou]} ${str#*[!aeiou]}
    odle oodle
    # str='.noodle'
    # echo ${str#?}     # leading dot matched by wildcard (not true for globs!)
    noodle

Patterns with quoted pattern characters
    # str='a*b?c\d'
    # echo ${str#*\*} ${str#*\?} ${str#*\\}
    b?c\d c\d d
    # echo ${str#*'*'} ${str#*'?'} ${str#*'\'}
    b?c\d c\d d
    # echo ${str#*"*"} ${str#*"?"} ${str#*"\\"}
    b?c\d c\d d

    # star='*' question='?' backslashes='\\'
    # echo ${str#*$star} ${str#*$question} ${str#*$backslashes}
    a*b?c\d *b?c\d d
    # backslash='\'
    # echo ${str#*$backslash}   # SKIP dash - spec is mute on trailing backslash
    a*b?c\d

Pattern matches, longest & shortest
    # str='ababxyxy'
    # echo ${str#a*b} ${str##a*b}
    abxyxy xyxy
    # echo ${str%x*y} ${str%%x*y}
    ababxy abab

Patterns on unset vars don't expand the pattern
    # something=yesindeedy
    # unset unknown
    # unset run; echo =${something#${run=yes}}=; echo ${run-no}
    =indeedy=
    yes
    # unset run; echo =${unknown#${run=yes}}=; echo ${run-no}
    ==
    no

Pattern matching examples from spec
    # unset X
    # echo ${X:=abc}
    abc

    # unset posix
    # set a b c
    # echo ${3:+posix}
    posix

    # HOME=/usr/posix
    # echo ${#HOME}
    10

    # x=file.c
    # echo ${x%.c}.o
    file.o

    # x=posix/src/std
    # echo ${x%%/*}
    posix

    # x=$HOME/src/cmd
    # echo ${x#$HOME}
    /src/cmd

    # x=/one/two/three
    # echo ${x##*/}
    three

    # x='*hi'
    # echo "${x#*}" ${x#"*"}
    *hi hi
