-- Copyright 2012 Google Inc. All Rights Reserved.
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

Tests for variables

Note that many bash tests are skipped because its output format is
non-standard, e.g. export -p returns "declare -x ...".

set shell variable
    # aaa=x                                     # SKIP bash
    # set | tr -d \'\" | fgrep aaa              # SKIP bash
    aaa=x

set empty shell variable
    # bbb=''                                    # SKIP bash
    # set | tr -d \'\" | fgrep bbb              # SKIP bash
    bbb=

export environment var
    # export ccc=x                              # SKIP bash
    # export -p | tr -d \'\" | fgrep ccc        # SKIP bash
    export ccc=x

export empty string environment var
    # export ddd=''                             # SKIP bash
    # export -p | tr -d \'\" | fgrep ddd        # SKIP bash
    export ddd=

export unassigned environment var
    # export eee                                # SKIP bash
    # export -p | tr -d \'\" | fgrep eee        # SKIP bash
    export eee

echoing unassigned var acts like empty string
    # echo ">>$eee<<"                           # SKIP bash
    >><<

setting exported variable remains exported
    # ccc=y                                     # SKIP bash
    # export -p | tr -d \'\" | fgrep ccc        # SKIP bash
    export ccc=y

set readonly shell variable
    # fff=x                                     # SKIP bash
    # readonly fff                              # SKIP bash
    # readonly -p | tr -d \'\" | fgrep fff      # SKIP bash
    readonly fff=x
    # set | tr -d \'\" | fgrep fff              # SKIP bash
    fff=x

set readonly environment variable
    # export ggg=x                              # SKIP bash
    # readonly ggg                              # SKIP bash
    # readonly -p | tr -d \'\" | fgrep ggg      # SKIP bash
    readonly ggg=x
    # export -p | tr -d \'\" | fgrep ggg        # SKIP bash
    export ggg=x

set readonly unassigned environment var
    # export hhh                                # SKIP bash
    # readonly hhh                              # SKIP bash
    # readonly -p | tr -d \'\" | fgrep hhh      # SKIP bash
    readonly hhh
    # export -p | tr -d \'\" | fgrep hhh        # SKIP bash
    export hhh

set readonly shell variable one-shot
    # readonly iii=x                # SKIP bash
    # readonly -p | tr -d \'\" | fgrep iii      # SKIP bash
    readonly iii=x
    # set | tr -d \'\" | fgrep iii              # SKIP bash
    iii=x

export readonly variable
    # readonly jjj=x                            # SKIP bash
    # export jjj                                # SKIP bash
    # readonly -p | tr -d \'\" | fgrep jjj      # SKIP bash
    readonly jjj=x
    # export -p | tr -d \'\" | fgrep jjj        # SKIP bash
    export jjj=x

export readonly unassigned environment var
    # readonly kkk                              # SKIP bash
    # export kkk                                # SKIP bash
    # readonly -p | tr -d \'\" | fgrep kkk      # SKIP bash
    readonly kkk
    # export -p | tr -d \'\" | fgrep kkk        # SKIP bash
    export kkk

can't set readonly shell variable
--
-- Note: This works dash, but dash has a different error message so
-- it's disabled.
    # readonly lll=x                            # SKIP: sh bash dash
    # lll=y && echo succeed || echo fail        # SKIP: sh bash dash
    var is read-only: lll
    fail

per-command exported variable bindings are restored after command exits
    # export mmm=1
    # mmm=2 env | fgrep mmm
    mmm=2
    # env | fgrep mmm
    mmm=1

per-command variable bindings for special built-in commands are not restored
Note: bash actually does the wrong thing here, and restores the binding.
    # nnn=1                                     # SKIP bash
    # nnn=2 set mmm=1                           # SKIP bash
    # set | tr -d \'\" | fgrep nnn              # SKIP bash
    nnn=2

dummy
    # echo ok
    ok
