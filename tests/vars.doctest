-- Copyright 2012 Google Inc. All Rights Reserved.
-- 
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
-- 
--     http://www.apache.org/licenses/LICENSE-2.0
-- 
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

Tests for variables

Note that many bash tests are skipped because its output format is
non-standard, e.g. export -p returns "declare -x ...". Also bash
running in sh mode often returns aaa=x or aaa="x" instead of aaa='x'.

set shell variable
    # aaa=x                             # SKIP: sh bash
    # set | fgrep aaa                   # SKIP: sh bash
    aaa='x'

set empty shell variable
    # bbb=''                            # SKIP: sh bash
    # set | fgrep bbb                   # SKIP: sh bash
    bbb=''

export environment var
    # export ccc=x                      # SKIP: sh bash
    # export -p | fgrep ccc             # SKIP: sh bash
    export ccc='x'

export empty string environment var
    # export ddd=''                     # SKIP: sh bash
    # export -p | fgrep ddd             # SKIP: sh bash
    export ddd=''

export unassigned environment var
    # export eee                        # SKIP: sh bash
    # export -p | fgrep eee             # SKIP: sh bash
    export eee

echoing unassigned var acts like empty string
    # echo ">>$eee<<"                   # SKIP: sh bash
    >><<

setting exported variable remains exported
    # ccc=y                             # SKIP: sh bash
    # export -p | fgrep ccc             # SKIP: sh bash
    export ccc='y'

set readonly shell variable
    # fff=x                             # SKIP: sh bash
    # readonly fff                      # SKIP: sh bash
    # readonly -p | fgrep fff           # SKIP: sh bash
    readonly fff='x'
    # set | fgrep fff                   # SKIP: sh bash
    fff='x'

set readonly environment variable
    # export ggg=x                      # SKIP: sh bash
    # readonly ggg                      # SKIP: sh bash
    # readonly -p | fgrep ggg           # SKIP: sh bash
    readonly ggg='x'
    # export -p | fgrep ggg             # SKIP: sh bash
    export ggg='x'

set readonly unassigned environment var
    # export hhh                        # SKIP: sh bash
    # readonly hhh                      # SKIP: sh bash
    # readonly -p | fgrep hhh           # SKIP: sh bash
    readonly hhh
    # export -p | fgrep hhh             # SKIP: sh bash
    export hhh

set readonly shell variable one-shot
    # readonly iii=x                    # SKIP: sh bash
    # readonly -p | fgrep iii           # SKIP: sh bash
    readonly iii='x'
    # set | fgrep iii                   # SKIP: sh bash
    iii='x'

export readonly variable
    # readonly jjj=x                    # SKIP: sh bash
    # export jjj                        # SKIP: sh bash
    # readonly -p | fgrep jjj           # SKIP: sh bash
    readonly jjj='x'
    # export -p | fgrep jjj             # SKIP: sh bash
    export jjj='x'

export readonly unassigned environment var
    # readonly kkk                      # SKIP: sh bash
    # export kkk                        # SKIP: sh bash
    # readonly -p | fgrep kkk           # SKIP: sh bash
    readonly kkk
    # export -p | fgrep kkk             # SKIP: sh bash
    export kkk

can't set readonly shell variable
--
-- Note: This works dash, but dash has a different error message so
-- it's disabled.
--
-- Note: This works for plush in doctest mode, but not when you run
-- shelltest ./dist/build/plush/plush because shelltest stderr isn't
-- captured as test output.
--
    # readonly lll=x                            # SKIP: sh bash dash
    # lll=y && echo succeed || echo fail        # SKIP: sh bash dash
    var is read-only: lll
    fail

per-command exported variable bindings are restored after command exits
    # export mmm=1
    # mmm=2 env | fgrep mmm
    mmm=2
    # env | fgrep mmm
    mmm=1

per-command variable bindings for special built-in commands are not restored
    # nnn=1
    # nnn=2 set mmm=1
    # set | fgrep nnn
    nnn='2'

dummy
    # echo ok
    ok
