-- Copyright 2012 Google Inc. All Rights Reserved.
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

Tests for functions

Function with no variables.
    # foo() { echo ok; }
    # foo
    ok

Function accessing global shell variable.
    # x=1
    # foo() { echo $x; }
    # foo
    1

Function accessing parameter variable.
    # set g1 g2
    # foo() { echo ==$1== ==$2==; }
    # foo f1
    ==f1== ====
    # echo ==$1== ==$2==
    ==g1== ==g2==

Assignment before a function call has persistent value.
Note that bash incorrectly restores the previous value.
    # y=111
    # foo() { echo $y; }
    # y=222 foo
    222
    # echo $y                           # SKIP bash
    222

Exit code is that of last command
    # foo() { true; false; }
    # foo ; echo $?
    1
    # foo() { false; true; }
    # foo ; echo $?
    0

Bizarre shell grammar: function body can be any compound command!
    # foo() for x in amy bob; do echo $1, $x; done
    # foo Hi
    Hi, amy
    Hi, bob

Unset functions. Note that we skip this test for other shells because
the error messages are different.
    # foo() { echo ok; }
    # unset -f foo
    # foo                               # SKIP sh dash bash
    Unknown command: foo
